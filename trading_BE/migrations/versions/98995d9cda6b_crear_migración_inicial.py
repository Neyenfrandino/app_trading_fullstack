"""Crear migración inicial

Revision ID: 98995d9cda6b
Revises: 058b339bea70
Create Date: 2024-06-15 16:54:01.377428

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '98995d9cda6b'
down_revision: Union[str, None] = '058b339bea70'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('nota_personal')
    op.drop_table('usuarioMoneda')
    op.alter_column('entrada', 'resultado_usdt',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.drop_constraint('entrada_objetivos_plan_id_fkey', 'entrada', type_='foreignkey')
    op.drop_column('entrada', 'objetivos_plan_id')
    op.drop_column('moneda', 'ruta_img')
    op.alter_column('objetivo_plan', 'plan',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('usuarios', 'nacionalidad')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('usuarios', sa.Column('nacionalidad', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.alter_column('objetivo_plan', 'plan',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.add_column('moneda', sa.Column('ruta_img', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('entrada', sa.Column('objetivos_plan_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('entrada_objetivos_plan_id_fkey', 'entrada', 'objetivo_plan', ['objetivos_plan_id'], ['id'])
    op.alter_column('entrada', 'resultado_usdt',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.create_table('usuarioMoneda',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"usuarioMoneda_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('usuario_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('moneda_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('cantidad', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['moneda_id'], ['moneda.id'], name='usuarioMoneda_moneda_id_fkey'),
    sa.ForeignKeyConstraint(['usuario_id'], ['usuarios.id'], name='usuarioMoneda_usuario_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='usuarioMoneda_pkey')
    )
    op.create_table('nota_personal',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('usuario_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('nota', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('fecha_creacion', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['usuario_id'], ['usuarios.id'], name='nota_personal_usuario_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='nota_personal_pkey')
    )
    # ### end Alembic commands ###

# Segunda migración
from alembic import op
import sqlalchemy as sa

def upgrade():
    # Eliminar valores nulos
    op.execute('UPDATE entrada SET resultado_usdt = 0 WHERE resultado_usdt IS NULL')

    # Modificar la columna para que no acepte valores nulos
    op.alter_column('entrada', 'resultado_usdt', existing_type=sa.Float(), nullable=False)

def downgrade():
    # Modificar la columna para que acepte valores nulos nuevamente
    op.alter_column('entrada', 'resultado_usdt', existing_type=sa.Float(), nullable=True)
